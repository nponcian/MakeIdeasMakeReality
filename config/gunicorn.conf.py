import multiprocessing

# The socket to bind. A string of the form: HOST, HOST:PORT, unix:PATH, fd://FD
# If gunicorn is run using systemd, take note that whatever is set here will be overriden by whatever
# is set in the ListenStream within the file gunicorn.socket.
bind = [
    # 'unix:/run/gunicorn.sock',
    # '0.0.0.0:8000',
    # '0.0.0.0:8001',
]

# Set environment variable (key=value).
# Pass variables to the execution environment.
raw_env = [
]

# The number of worker processes for handling requests.
# A positive integer generally in the 2-4 x $(NUM_CORES) range.
workers = multiprocessing.cpu_count() * 2 + 1

# Detaches the server from the controlling terminal and enters the background.
# Similar effect with nohup or screen.
# Make sure that when using either of these service monitors (such as systemd) you do not enable the
# Gunicorn’s daemon mode. These monitors expect that the process they launch will be the process they
# need to monitor. Daemonizing will fork-exec which creates an unmonitored process and generally just
# confuses the monitor services.
daemon = False

# The Access log file to write to.
# '-' means log to stdout.
# Logs details of each HTTP Request made. The path is relative to where gunicorn will be invoked.
accesslog = 'log/accesslog.log'

# The access log format.
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s"'

# The Error log file to write to.
# Using '-' for FILE makes gunicorn log to stderr.
# Logs generated by Gunicorn starting from the loglevel provided and the higher levels.
errorlog = 'log/errorlog.log'

# The granularity of Error log outputs.
# Valid level names are:
#     debug
#     info
#     warning
#     error
#     critical
loglevel = 'info'

# Redirect stdout/stderr to specified file in errorlog.
# This catches prints made within Python code.
capture_output = True

# It is recommended to pass protocol information to Gunicorn. Many web frameworks use this information
# to generate URLs. Without this information, the application may mistakenly generate ‘http’ URLs in
# ‘https’ responses, leading to mixed content warnings or broken applications. To configure Nginx to
# pass an appropriate header, add a proxy_set_header directive to your location block:
#     ...
#     proxy_set_header X-Forwarded-Proto $scheme;
#     ...
# If you are running Nginx on a different host than Gunicorn you need to tell Gunicorn to trust the
# X-Forwarded-* headers sent by Nginx. By default, Gunicorn will only trust these headers if the
# connection comes from localhost. This is to prevent a malicious client from forging these headers:
#     $ gunicorn -w 3 --forwarded-allow-ips="10.170.3.217,10.170.3.220" test:app
# Front-end’s IPs from which allowed to handle set secure headers. (comma separate).
# Set to * to disable checking of Front-end IPs (useful for setups where you don’t know in advance the
# IP address of Front-end, but you still trust the environment). By default, the value of the
# FORWARDED_ALLOW_IPS environment variable. When the Gunicorn host is completely firewalled from the
# external network such that all connections come from a trusted proxy (e.g. Heroku) this value can be
# set to ‘*’. Using this value is potentially dangerous if connections to Gunicorn may come from
# untrusted proxies or directly from clients since the application may be tricked into serving SSL-only
# content over an insecure connection.
# If it is not defined, the default is "127.0.0.1".
# For multiple IPs, separate by comma such as "10.170.3.217,10.170.3.220"
forwarded_allow_ips = '127.0.0.1'
