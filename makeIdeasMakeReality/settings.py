"""
Django settings for makeIdeasMakeReality project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['MIMR_SETTINGS_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ['MIMR_SETTINGS_DEBUG'] == "True"

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'home',
    'service',
    'text',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'makeIdeasMakeReality.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'makeIdeasMakeReality.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ['MIMR_SETTINGS_DB_NAME'],
        'USER': os.environ['MIMR_SETTINGS_DB_USER'],
        'PASSWORD': os.environ['MIMR_SETTINGS_DB_PASSWORD'],
        'HOST': os.environ['MIMR_SETTINGS_DB_HOST'],
        'PORT': os.environ['MIMR_SETTINGS_DB_PORT'],
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

# The base url to access the static files
# ex.
#     http://35.192.166.203:8003/static/home/assets/img/homeJumbotron.jpg
STATIC_URL = '/static/'

# The location in the local directory of the server serving static files to where the static files
# are stored
# ex.
#     /var/www/makeIdeasMakeReality/
# Thus, based on the above URL, the file should be located in:
#     /var/www/makeIdeasMakeReality/home/assets/img/homeJumbotron.jpg
STATIC_ROOT = os.environ['MIMR_SETTINGS_STATIC_ROOT']

# The locations in the local directory to where the different static files to be served are located.
# 1. If running with manage.py-runserver (with DEBUG=True and django.contrib.staticfiles), then these
#    locations are automatically functional to serve the static files inside them.
# 2. If running with Gunicorn or Nginx, these locations aren't automatically searched. The Nginx
#    server should be informed first about the location to where the static files are. This is only 1
#    location, which is the one indicated in STATIC_ROOT, such as /var/www/makeIdeasMakeReality/. Now
#    we have a single location to where every static file should come from. Next is we should put all
#    current static files that are possibly located in multiple locations (the locations indicated in
#    STATICFILES_DIRS) to the target single location by running <./manage.py collectstatic>. As the
#    name suggests, what it does is put all the files and directories located in each of the
#    STATICFILES_DIRS and copy them (not move) to the STATIC_ROOT location, ready to be served by
#    Nginx (if configured to read from the location stated in STATIC_ROOT).
STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, "static"),
    os.path.join(BASE_DIR, 'templates'),
    os.path.join(BASE_DIR, "home", "templates"),
]
